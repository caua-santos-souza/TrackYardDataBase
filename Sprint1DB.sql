// remove tabelas existentes
drop table motos cascade constraints;
drop table patios cascade constraints;
drop table pontos_leitura cascade constraints;
drop table movimentacoes cascade constraints;

// cria tabela motos
create table motos (
  id_moto varchar2(50) primary key,
  modelo varchar2(100) not null,
  placa varchar2(10) unique not null
);

// insere dados em motos
insert into motos (id_moto, modelo, placa) values ('MT001', 'Honda Biz 110i', 'ABC1A23');
insert into motos (id_moto, modelo, placa) values ('MT002', 'Yamaha NEO 125', 'DEF4B56');
insert into motos (id_moto, modelo, placa) values ('MT003', 'Honda CG 160', 'GHI7C89');
insert into motos (id_moto, modelo, placa) values ('MT004', 'Yamaha Factor 150', 'JKL0D12');
insert into motos (id_moto, modelo, placa) values ('MT005', 'Mottu Sport 110i', 'MNO3E45');

// cria tabela patios
create table patios (
  id_patio number primary key,
  nome varchar2(100) not null,
  telefone varchar2(20),
  endereco varchar2(200)
);

// insere dados em patios
insert into patios (id_patio, nome, telefone, endereco) values (1, 'Pátio Zona Norte', '11998765432', 'Rua A, 100 - São Paulo');
insert into patios (id_patio, nome, telefone, endereco) values (2, 'Pátio Zona Sul', '11991234567', 'Rua B, 200 - São Paulo');
insert into patios (id_patio, nome, telefone, endereco) values (3, 'Pátio Centro', '11990001122', 'Av. Central, 500 - São Paulo');
insert into patios (id_patio, nome, telefone, endereco) values (4, 'Pátio Osasco', '11993334444', 'Rua das Flores, 321 - Osasco');
insert into patios (id_patio, nome, telefone, endereco) values (5, 'Pátio Campinas', '11994445555', 'Av. Brasil, 101 - Campinas');

// cria tabela pontos_leitura
create table pontos_leitura (
  id_ponto number primary key,
  id_patio number not null,
  nome_ponto varchar2(50) not null,
  descricao varchar2(200),
  constraint fk_pontos_leitura_patio foreign key (id_patio)
    references patios(id_patio)
    on delete cascade
);

// insere dados em pontos_leitura
insert into pontos_leitura (ID_PONTO, ID_PATIO, NOME_PONTO, DESCRICAO) values (101, 1, 'Entrada Principal', 'Acesso principal ao pátio Zona Norte');
insert into pontos_leitura (ID_PONTO, ID_PATIO, NOME_PONTO, DESCRICAO) values (102, 1, 'Saída Lateral', 'Saída para a rua lateral');
insert into pontos_leitura (ID_PONTO, ID_PATIO, NOME_PONTO, DESCRICAO) values (201, 2, 'Portão 1', 'Entrada do pátio Zona Sul');
insert into pontos_leitura (ID_PONTO, ID_PATIO, NOME_PONTO, DESCRICAO) values (301, 3, 'Câmera Central', 'Ponto de leitura com câmera');
insert into pontos_leitura (ID_PONTO, ID_PATIO, NOME_PONTO, DESCRICAO) values (401, 4, 'Portão Traseiro', 'Portão nos fundos do pátio Osasco');

// cria tabela movimentacoes
create table movimentacoes (
  id_movimentacao number generated by default as identity primary key,
  id_moto varchar2(50),
  id_ponto number,
  data_hora timestamp,
  constraint fk_movimentacoes_moto foreign key (id_moto)
    references motos(id_moto),
  constraint fk_movimentacoes_ponto foreign key (id_ponto)
    references pontos_leitura(id_ponto)
);

// insere dados em movimentacoes
insert into movimentacoes (id_moto, id_ponto, data_hora) values ('MT001', 101, to_timestamp('2025-05-01 08:00:00', 'YYYY-MM-DD HH24:MI:SS'));
insert into movimentacoes (id_moto, id_ponto, data_hora) values ('MT001', 102, to_timestamp('2025-05-01 09:30:00', 'YYYY-MM-DD HH24:MI:SS'));
insert into movimentacoes (id_moto, id_ponto, data_hora) values ('MT002', 201, to_timestamp('2025-05-01 10:00:00', 'YYYY-MM-DD HH24:MI:SS'));
insert into movimentacoes (id_moto, id_ponto, data_hora) values ('MT003', 301, to_timestamp('2025-05-01 11:15:00', 'YYYY-MM-DD HH24:MI:SS'));
insert into movimentacoes (id_moto, id_ponto, data_hora) values ('MT004', 401, to_timestamp('2025-05-01 12:45:00', 'YYYY-MM-DD HH24:MI:SS'));

// habilita saída do console
set serveroutput on;

// bloco 1: total de movimentações por moto
declare
  v_id_moto motos.id_moto%type;
  v_modelo motos.modelo%type;
  v_total_movimentacoes number;
begin
  for moto_rec in (
    select m.id_moto, m.modelo, count(mv.id_movimentacao) as total_movimentacoes
    from motos m join movimentacoes mv on m.id_moto = mv.id_moto
    group by m.id_moto, m.modelo order by total_movimentacoes desc
  ) loop
    v_id_moto := moto_rec.id_moto;
    v_modelo := moto_rec.modelo;
    v_total_movimentacoes := moto_rec.total_movimentacoes;
    dbms_output.put_line('Moto: ' || v_id_moto || ' - Modelo: ' || v_modelo || ' - Movimentações: ' || v_total_movimentacoes);
  end loop;
end;
/

// bloco 2: total de movimentações por pátio
declare
  v_nome_patio patios.nome%type;
  v_total_mov number;
begin
  for patio_rec in (
    select p.nome as nome_patio, count(mv.id_movimentacao) as total_mov
    from patios p join pontos_leitura pl on p.id_patio = pl.id_patio join movimentacoes mv on pl.id_ponto = mv.id_ponto
    group by p.nome order by total_mov desc
  ) loop
    v_nome_patio := patio_rec.nome_patio;
    v_total_mov := patio_rec.total_mov;
    dbms_output.put_line('Pátio: ' || v_nome_patio || ' - Movimentações: ' || v_total_mov);
  end loop;
end;
/

//bloco 3: mostra data atual, anterior e próxima de movimentações
declare
  cursor c_mov is
    select data_hora from movimentacoes order by data_hora;
  v_atual movimentacoes.data_hora%type;
  v_anterior movimentacoes.data_hora%type := null;
  v_proximo movimentacoes.data_hora%type;
  v_index pls_integer := 0;
  type t_datas is table of movimentacoes.data_hora%type index by pls_integer;
  datas t_datas;
begin
  for r in c_mov loop
    v_index := v_index + 1;
    datas(v_index) := r.data_hora;
  end loop;
  for i in 1..v_index loop
    v_atual := datas(i);
    if i > 1 then
      v_anterior := datas(i - 1);
    else
      v_anterior := null;
    end if;
    if i < v_index then
      v_proximo := datas(i + 1);
    else
      v_proximo := null;
    end if;
    dbms_output.put_line('Anterior: ' || nvl(to_char(v_anterior, 'YYYY-MM-DD HH24:MI:SS'), 'Vazio') || 
                         ' | Atual: ' || to_char(v_atual, 'YYYY-MM-DD HH24:MI:SS') || 
                         ' | Próximo: ' || nvl(to_char(v_proximo, 'YYYY-MM-DD HH24:MI:SS'), 'Vazio'));
  end loop;
end;
/